{"version":3,"sources":["components/Navbar.js","components/ImageResults.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","AppBar_default","title","ImageResults","state","open","currentImg","handleOpen","img","_this","setState","handleClose","imageListContent","_this2","this","images","props","GridList","cols","map","tags","key","id","subtitle","user","actionIcon","IconButton_default","onClick","largeImageURL","zoom_in_default","color","src","alt","actions","FlatButton_default","label","primary","Dialog_default","modal","onRequestClose","style","width","Component","Search","searchText","amount","apiUrl","apiKey","process","onTextChange","e","val","target","value","Object","defineProperty","name","axios","get","concat","then","res","data","hits","catch","err","console","log","onAmountChange","index","marginLeft","TextField_default","onChange","floatingLabelText","fullWidth","SelectField_default","MenuItem_default","primaryText","length","components_ImageResults","App","MuiThemeProvider_default","react_router_dom","basename","components_Navbar","components_Search","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f3a56378.chunk.js","sourcesContent":["import React from 'react'\r\nimport AppBar from 'material-ui/AppBar';\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <AppBar title=\"Pixabay Image Finder\"/>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import React, { Component } from 'react'\r\nimport propTypes from 'prop-types'\r\nimport { GridList, GridTile } from 'material-ui/GridList';\r\nimport IconButton from 'material-ui/IconButton';\r\nimport ZoomIn from 'material-ui/svg-icons/action/zoom-in';\r\nimport Dialog from 'material-ui/Dialog';\r\nimport FlatButton from 'material-ui/FlatButton';\r\n\r\nclass ImageResults extends Component {\r\n    state = {\r\n        open: false,\r\n        currentImg: ''\r\n    }\r\n\r\n    handleOpen = img => {\r\n        this.setState({ open: true, currentImg: img});\r\n    }\r\n\r\n    handleClose = () => {\r\n        this.setState({ open: false});\r\n    }\r\n\r\n    render() {\r\n        let imageListContent;\r\n        const { images } = this.props;\r\n\r\n        if(images) {\r\n            imageListContent = (\r\n                <GridList cols={3}>\r\n                    {images.map(img => (\r\n                        <GridTile\r\n                        title={img.tags}\r\n                        key={img.id}\r\n                        subtitle={\r\n                            <span>\r\n                                by <strong>{img.user}</strong>\r\n                            </span>\r\n                        }\r\n                        actionIcon={\r\n                            <IconButton onClick={() => this.handleOpen(img.largeImageURL)}>\r\n                                <ZoomIn color=\"white\" />\r\n                            </IconButton>\r\n                        }>\r\n                            <img  src={img.largeImageURL} alt=\"\"/>\r\n\r\n                        </GridTile>\r\n                    )) }\r\n                </GridList>\r\n            )\r\n        } else {\r\n            imageListContent = null;\r\n        }\r\n\r\n        const actions = [\r\n            <FlatButton label=\"Close\" primary={true} onClick={this.handleClose}/>\r\n        ]\r\n\r\n        return (\r\n            <div>\r\n                {imageListContent}\r\n                <Dialog \r\n                    actions={actions}\r\n                    modal={false}\r\n                    open={this.state.open}\r\n                    onRequestClose={this.handleClose}>\r\n                    <img src={this.state.currentImg} alt=\"\" style={{ width: '100%'}}/>\r\n                </Dialog>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nImageResults.propTypes = {\r\n    images: propTypes.array.isRequired\r\n}\r\n\r\nexport default  ImageResults\r\n","import React, { Component } from 'react'\r\nimport TextField from 'material-ui/TextField'\r\nimport SelectField from 'material-ui/SelectField'\r\nimport MenuItem from 'material-ui/MenuItem'\r\nimport axios from 'axios'\r\nimport ImageResults from './ImageResults'\r\n\r\nclass Search extends Component {\r\n    state = {\r\n        searchText: '',\r\n        amount: 15,\r\n        apiUrl: 'https://pixabay.com/api',\r\n        apiKey: process.env.REACT_APP_IMAGE_FINDER,\r\n        images: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get(`${this.state.apiUrl}/?key=${this.state.apiKey}&q=flowers\r\n                &image_type=photo&per_page=${this.state.amount}&safesearch=true`)\r\n                .then(res => this.setState({images: res.data.hits}))\r\n                .catch(err => console.log(err));\r\n    }\r\n\r\n    onTextChange = e => {\r\n        const val = e.target.value;\r\n        this.setState({[e.target.name]: val}, () => {\r\n            if(val === '') {\r\n                this.setState({searchText: []});\r\n            } else {\r\n                axios.get(`${this.state.apiUrl}/?key=${this.state.apiKey}&q=${this.state.searchText}\r\n                &image_type=photo&per_page=${this.state.amount}&safesearch=true`)\r\n                .then(res => this.setState({images: res.data.hits}))\r\n                .catch(err => console.log(err));\r\n            }\r\n        });\r\n    };\r\n\r\n    onAmountChange = (e, index, value) => {\r\n        this.setState({ amount: value})\r\n    }\r\n\r\n    render() {\r\n        const side = {\r\n            marginLeft:\"5px\"\r\n        }\r\n        return (\r\n            <div style={side}>\r\n                <TextField\r\n                    name=\"searchText\"\r\n                    value={this.state.searchText}\r\n                    onChange={this.onTextChange}\r\n                    floatingLabelText=\"Search For Images...\"\r\n                    fullWidth={true}/>\r\n                    <br/>\r\n                    <SelectField\r\n                        name=\"amount\"\r\n                        floatingLabelText=\"Images\"\r\n                        value={this.state.amount}\r\n                        onChange={this.onAmountChange}>\r\n                            <MenuItem value={5} primaryText=\"5\"/>\r\n                            <MenuItem value={10} primaryText=\"10\"/>\r\n                            <MenuItem value={15} primaryText=\"15\"/>\r\n                            <MenuItem value={20} primaryText=\"20\"/>\r\n                            <MenuItem value={25} primaryText=\"25\"/>\r\n\r\n                    </SelectField>\r\n                    <br/>\r\n                    {this.state.images.length > 0 ? (<ImageResults images={this.state.images} />) : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Search\r\n","import React from 'react';\nimport './App.css';\nimport {BrowserRouter} from 'react-router-dom'\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport Navbar from './components/Navbar';\nimport Search from './components/Search';\n\nfunction App() {\n  return (\n    <MuiThemeProvider>\n      <BrowserRouter basename='/ImageFinder/'>\n         <Navbar/>\n         <Search/>\n      </BrowserRouter>\n    </MuiThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}